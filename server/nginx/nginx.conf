user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;

events {
    worker_connections 1024;    # increase if you have lots of clients
    accept_mutex off;           # set to 'on' if nginx worker_processes > 1
    use epoll;
    multi_accept on;
}

http {
    include      /etc/nginx/mime.types;
    default_type application/octet-stream;  # fallback in case we can't determine a type
    log_format          main    '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';
    access_log          /var/log/nginx/access.log;
    keepalive_timeout   65;
    keepalive_requests  100000;
    # tcp_nopush on;    # nginx optimizations
    # tcp_nodelay on;   # nginx optimizations
    sendfile on;

    upstream app_server {
        # for UNIX domain socket setups
        # server unix:/tmp/gunicorn.sock fail_timeout=0;

        # for a TCP configuration
        server 172.18.0.2:8000 fail_timeout=0;
    }

    server {
        server_name chrisdoescoding.com www.chrisdoescoding.com 50.116.52.171;
        proxy_pass_header server;
        client_max_body_size 4G;

        location /static/ {
            root /home/cs-cordero/;
            # checks for static file, if not found proxy to app
            try_files $uri /;
        }

        location = /kb/ {
            return 301 /kb/index.html;
        }

        location /kb/ {
            root /home/cs-cordero/;
            # checks for static file, if not found proxy to app
            try_files $uri /;
        }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://app_server;
        }

        # added by Certbot
        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/chrisdoescoding.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/chrisdoescoding.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    }

    server {
        # added by Certbot
        if ($host = www.chrisdoescoding.com) {
            return 301 https://$host$request_uri;
        }

        if ($host = chrisdoescoding.com) {
            return 301 https://$host$request_uri;
        }

        listen 80;
        server_name chrisdoescoding.com www.chrisdoescoding.com 50.116.52.171;
        return 404; # managed by Certbot
    }
}
